// source: klima.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.acremote.StateRequest', null, global);
goog.exportSymbol('proto.acremote.StateRequest.Mode', null, global);
goog.exportSymbol('proto.acremote.StateRequest.Speed', null, global);
goog.exportSymbol('proto.acremote.StateResponse', null, global);
goog.exportSymbol('proto.acremote.StateResponse.Mode', null, global);
goog.exportSymbol('proto.acremote.StateResponse.Speed', null, global);
goog.exportSymbol('proto.acremote.Void', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.acremote.Void = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.acremote.Void, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.acremote.Void.displayName = 'proto.acremote.Void';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.acremote.StateRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.acremote.StateRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.acremote.StateRequest.displayName = 'proto.acremote.StateRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.acremote.StateResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.acremote.StateResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.acremote.StateResponse.displayName = 'proto.acremote.StateResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.acremote.Void.prototype.toObject = function(opt_includeInstance) {
  return proto.acremote.Void.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.acremote.Void} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.acremote.Void.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.acremote.Void}
 */
proto.acremote.Void.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.acremote.Void;
  return proto.acremote.Void.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.acremote.Void} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.acremote.Void}
 */
proto.acremote.Void.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.acremote.Void.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.acremote.Void.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.acremote.Void} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.acremote.Void.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.acremote.StateRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.acremote.StateRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.acremote.StateRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.acremote.StateRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    power: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    temperature: jspb.Message.getFieldWithDefault(msg, 2, 0),
    speed: jspb.Message.getFieldWithDefault(msg, 3, 0),
    mode: jspb.Message.getFieldWithDefault(msg, 4, 0),
    swing: jspb.Message.getBooleanFieldWithDefault(msg, 5, false),
    ionizer: jspb.Message.getBooleanFieldWithDefault(msg, 6, false),
    turbo: jspb.Message.getBooleanFieldWithDefault(msg, 7, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.acremote.StateRequest}
 */
proto.acremote.StateRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.acremote.StateRequest;
  return proto.acremote.StateRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.acremote.StateRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.acremote.StateRequest}
 */
proto.acremote.StateRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setPower(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTemperature(value);
      break;
    case 3:
      var value = /** @type {!proto.acremote.StateRequest.Speed} */ (reader.readEnum());
      msg.setSpeed(value);
      break;
    case 4:
      var value = /** @type {!proto.acremote.StateRequest.Mode} */ (reader.readEnum());
      msg.setMode(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSwing(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIonizer(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setTurbo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.acremote.StateRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.acremote.StateRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.acremote.StateRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.acremote.StateRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPower();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getTemperature();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getSpeed();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getMode();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getSwing();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getIonizer();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
  f = message.getTurbo();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.acremote.StateRequest.Speed = {
  LOW: 0,
  MID: 1,
  HIGH: 2,
  AUTO: 3
};

/**
 * @enum {number}
 */
proto.acremote.StateRequest.Mode = {
  COOL: 0,
  HEAT: 1,
  FAN: 2,
  DRY: 3
};

/**
 * optional bool power = 1;
 * @return {boolean}
 */
proto.acremote.StateRequest.prototype.getPower = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.acremote.StateRequest} returns this
 */
proto.acremote.StateRequest.prototype.setPower = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional int32 temperature = 2;
 * @return {number}
 */
proto.acremote.StateRequest.prototype.getTemperature = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.acremote.StateRequest} returns this
 */
proto.acremote.StateRequest.prototype.setTemperature = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional Speed speed = 3;
 * @return {!proto.acremote.StateRequest.Speed}
 */
proto.acremote.StateRequest.prototype.getSpeed = function() {
  return /** @type {!proto.acremote.StateRequest.Speed} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.acremote.StateRequest.Speed} value
 * @return {!proto.acremote.StateRequest} returns this
 */
proto.acremote.StateRequest.prototype.setSpeed = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional Mode mode = 4;
 * @return {!proto.acremote.StateRequest.Mode}
 */
proto.acremote.StateRequest.prototype.getMode = function() {
  return /** @type {!proto.acremote.StateRequest.Mode} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.acremote.StateRequest.Mode} value
 * @return {!proto.acremote.StateRequest} returns this
 */
proto.acremote.StateRequest.prototype.setMode = function(value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional bool swing = 5;
 * @return {boolean}
 */
proto.acremote.StateRequest.prototype.getSwing = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.acremote.StateRequest} returns this
 */
proto.acremote.StateRequest.prototype.setSwing = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * optional bool ionizer = 6;
 * @return {boolean}
 */
proto.acremote.StateRequest.prototype.getIonizer = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.acremote.StateRequest} returns this
 */
proto.acremote.StateRequest.prototype.setIonizer = function(value) {
  return jspb.Message.setProto3BooleanField(this, 6, value);
};


/**
 * optional bool turbo = 7;
 * @return {boolean}
 */
proto.acremote.StateRequest.prototype.getTurbo = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 7, false));
};


/**
 * @param {boolean} value
 * @return {!proto.acremote.StateRequest} returns this
 */
proto.acremote.StateRequest.prototype.setTurbo = function(value) {
  return jspb.Message.setProto3BooleanField(this, 7, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.acremote.StateResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.acremote.StateResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.acremote.StateResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.acremote.StateResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    power: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    temperature: jspb.Message.getFieldWithDefault(msg, 2, 0),
    speed: jspb.Message.getFieldWithDefault(msg, 3, 0),
    mode: jspb.Message.getFieldWithDefault(msg, 4, 0),
    swing: jspb.Message.getBooleanFieldWithDefault(msg, 5, false),
    ionizer: jspb.Message.getBooleanFieldWithDefault(msg, 6, false),
    turbo: jspb.Message.getBooleanFieldWithDefault(msg, 7, false),
    maxtemperature: jspb.Message.getFieldWithDefault(msg, 8, 0),
    mintemperature: jspb.Message.getFieldWithDefault(msg, 9, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.acremote.StateResponse}
 */
proto.acremote.StateResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.acremote.StateResponse;
  return proto.acremote.StateResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.acremote.StateResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.acremote.StateResponse}
 */
proto.acremote.StateResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setPower(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTemperature(value);
      break;
    case 3:
      var value = /** @type {!proto.acremote.StateResponse.Speed} */ (reader.readEnum());
      msg.setSpeed(value);
      break;
    case 4:
      var value = /** @type {!proto.acremote.StateResponse.Mode} */ (reader.readEnum());
      msg.setMode(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSwing(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIonizer(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setTurbo(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMaxtemperature(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMintemperature(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.acremote.StateResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.acremote.StateResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.acremote.StateResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.acremote.StateResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPower();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getTemperature();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getSpeed();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getMode();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getSwing();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getIonizer();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
  f = message.getTurbo();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
  f = message.getMaxtemperature();
  if (f !== 0) {
    writer.writeInt32(
      8,
      f
    );
  }
  f = message.getMintemperature();
  if (f !== 0) {
    writer.writeInt32(
      9,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.acremote.StateResponse.Speed = {
  LOW: 0,
  MID: 1,
  HIGH: 2,
  AUTO: 3
};

/**
 * @enum {number}
 */
proto.acremote.StateResponse.Mode = {
  COOL: 0,
  HEAT: 1,
  FAN: 2,
  DRY: 3
};

/**
 * optional bool power = 1;
 * @return {boolean}
 */
proto.acremote.StateResponse.prototype.getPower = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.acremote.StateResponse} returns this
 */
proto.acremote.StateResponse.prototype.setPower = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional int32 temperature = 2;
 * @return {number}
 */
proto.acremote.StateResponse.prototype.getTemperature = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.acremote.StateResponse} returns this
 */
proto.acremote.StateResponse.prototype.setTemperature = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional Speed speed = 3;
 * @return {!proto.acremote.StateResponse.Speed}
 */
proto.acremote.StateResponse.prototype.getSpeed = function() {
  return /** @type {!proto.acremote.StateResponse.Speed} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.acremote.StateResponse.Speed} value
 * @return {!proto.acremote.StateResponse} returns this
 */
proto.acremote.StateResponse.prototype.setSpeed = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional Mode mode = 4;
 * @return {!proto.acremote.StateResponse.Mode}
 */
proto.acremote.StateResponse.prototype.getMode = function() {
  return /** @type {!proto.acremote.StateResponse.Mode} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.acremote.StateResponse.Mode} value
 * @return {!proto.acremote.StateResponse} returns this
 */
proto.acremote.StateResponse.prototype.setMode = function(value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional bool swing = 5;
 * @return {boolean}
 */
proto.acremote.StateResponse.prototype.getSwing = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.acremote.StateResponse} returns this
 */
proto.acremote.StateResponse.prototype.setSwing = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * optional bool ionizer = 6;
 * @return {boolean}
 */
proto.acremote.StateResponse.prototype.getIonizer = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.acremote.StateResponse} returns this
 */
proto.acremote.StateResponse.prototype.setIonizer = function(value) {
  return jspb.Message.setProto3BooleanField(this, 6, value);
};


/**
 * optional bool turbo = 7;
 * @return {boolean}
 */
proto.acremote.StateResponse.prototype.getTurbo = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 7, false));
};


/**
 * @param {boolean} value
 * @return {!proto.acremote.StateResponse} returns this
 */
proto.acremote.StateResponse.prototype.setTurbo = function(value) {
  return jspb.Message.setProto3BooleanField(this, 7, value);
};


/**
 * optional int32 maxTemperature = 8;
 * @return {number}
 */
proto.acremote.StateResponse.prototype.getMaxtemperature = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.acremote.StateResponse} returns this
 */
proto.acremote.StateResponse.prototype.setMaxtemperature = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional int32 minTemperature = 9;
 * @return {number}
 */
proto.acremote.StateResponse.prototype.getMintemperature = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.acremote.StateResponse} returns this
 */
proto.acremote.StateResponse.prototype.setMintemperature = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


goog.object.extend(exports, proto.acremote);
